"""
DO NOT EDIT THIS FILE

This settings file contains everything needed for Alliance Auth projects to function.
It gets overwritten by the 'allianceauth update' command.
If you wish to make changes, overload the setting in your project's settings file (local.py).
"""

import os
import sys

from django.contrib import messages
from celery.schedules import crontab

import environ

env = environ.Env()

INSTALLED_APPS = [
    "allianceauth",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "django_celery_beat",
    "bootstrapform",
    "sortedm2m",
    "esi",
    "allianceauth.authentication",
    "allianceauth.services",
    "allianceauth.eveonline",
    "allianceauth.groupmanagement",
    "allianceauth.notifications",
    "allianceauth.thirdparty.navhelper",
    # custom modules
    # "allianceauth.services.modules.discord",
    "eveuniverse",
]

SECRET_KEY = env.str("DJANGO_SECRET_KEY")

redis_host = env.str("REDIS_HOST")
# Celery configuration
BROKER_URL = f"redis://{redis_host}:6379/0"
CELERYBEAT_SCHEDULER = "django_celery_beat.schedulers.DatabaseScheduler"

CELERYBEAT_SCHEDULE = {
    "esi_cleanup_callbackredirect": {
        "task": "esi.tasks.cleanup_callbackredirect",
        "schedule": crontab(minute="0", hour="*/4"),
    },
    "esi_cleanup_token": {
        "task": "esi.tasks.cleanup_token",
        "schedule": crontab(minute="0", hour="0"),
    },
    "run_model_update": {
        "task": "allianceauth.eveonline.tasks.run_model_update",
        "schedule": crontab(minute="0", hour="*/6"),
    },
    "check_all_character_ownership": {
        "task": "allianceauth.authentication.tasks.check_all_character_ownership",
        "schedule": crontab(minute="0", hour="*/4"),
    },
    "analytics_daily_stats": {
        "task": "allianceauth.analytics.tasks.analytics_daily_stats",
        "schedule": crontab(minute="0", hour="2"),
    },
    "discord.update_all_usernames": {
        "task": "discord.update_all_usernames",
        "schedule": crontab(minute="0", hour="*/12"),
    },
    "memberaudit_run_regular_updates": {
        "task": "memberaudit.tasks.run_regular_updates",
        "schedule": crontab(minute="0", hour="*/1"),
    },
    # "sovtimer.tasks.run_sov_campaign_updates": {
    #     "task": "sovtimer.tasks.run_sov_campaign_updates",
    #     "schedule": 30.0,
    # },
    # "killtracker_run_killtracker": {
    #     "task": "killtracker.tasks.run_killtracker",
    #     "schedule": crontab(minute="*/1"),
    # },
    "mailrelay_forward_new_mails": {
        "task": "mailrelay.tasks.forward_new_mails",
        "schedule": crontab(minute="*/5"),
    },
    "freight_run_contracts_sync": {
        "task": "freight.tasks.run_contracts_sync",
        "schedule": crontab(minute="*/10"),
    },
}

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "allianceauth.authentication.middleware.UserSettingsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allianceauth.analytics.middleware.AnalyticsMiddleware",
]


def show_toolbar_callback(request):
    return DEBUG


DEBUG_TOOLBAR_CONFIG = {"SHOW_TOOLBAR_CALLBACK": "ncbuyback.settings.show_toolbar_callback"}

LOCALE_PATHS = (os.path.join(BASE_DIR, "locale/"),)

LANGUAGES = (
    ("en", "English"),
    ("de", "German"),
    ("es", "Spanish"),
    ("zh-hans", "Chinese Simplified"),
    ("ru", "Russian"),
    ("ko", "Korean"),
    ("fr", "French"),
    ("ja", "Japanese"),
    ("it", "Italian"),
    ("uk", "Ukrainian"),
)

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(PROJECT_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "allianceauth.context_processors.auth_settings",
            ],
        },
    },
]

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTHENTICATION_BACKENDS = [
    "allianceauth.authentication.backends.StateBackend",
    "django.contrib.auth.backends.ModelBackend",
]

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = "en-us"

LANGUAGE_COOKIE_AGE = 1209600

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
STATIC_URL = "/static/"
STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, "static"),
]
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Bootstrap messaging css workaround
MESSAGE_TAGS = {messages.ERROR: "danger error"}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{redis_host}:6379/1",  # change the 1 here to change the database used
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"

ALLOWED_HOSTS = ["*"]

LOGIN_URL = "auth_login_user"  # view that handles login logic

LOGIN_REDIRECT_URL = "authentication:dashboard"  # default destination when logging in if no redirect specified
LOGOUT_REDIRECT_URL = "authentication:dashboard"  # destination after logging out
# Both of these redirects accept values as per the django redirect shortcut
# https://docs.djangoproject.com/en/1.11/topics/http/shortcuts/#redirect
# - url names eg 'authentication:dashboard'
# - relative urls eg '/dashboard'
# - absolute urls eg 'http://example.com/dashboard'

# scopes required on new tokens when logging in. Cannot be blank.
LOGIN_TOKEN_SCOPES = [
    "publicData",
]

# number of days email verification links are valid for
ACCOUNT_ACTIVATION_DAYS = 1

ESI_API_URL = "https://esi.evetech.net/"
ESI_CONNECTION_POOL_MAXSIZE = 20

EVEUNIVERSE_LOAD_STATIONS = True

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
        "simple": {"format": "%(levelname)s %(message)s"},
    },
    "handlers": {
        "console": {
            "level": "INFO",  # edit this line to change logging level to console
            "class": "logging.StreamHandler",
            "formatter": "verbose",
            "stream": sys.stdout,
        },
        "notifications": {  # creates notifications for users with logging_notifications permission
            "level": "ERROR",  # edit this line to change logging level to notifications
            "class": "allianceauth.notifications.handlers.NotificationHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "allianceauth": {
            "handlers": ["console", "notifications"],
            "level": "DEBUG",
        },
        "extensions": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
        "django": {
            "handlers": ["console"],
            "level": "ERROR",
        },
        "esi": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
        "": {
            "handlers": ["console"],
            "level": "INFO",
        },
    },
}

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# These are required for Django to function properly. Don't touch.
ROOT_URLCONF = "ncbuyback.urls"
WSGI_APPLICATION = "ncbuyback.wsgi.application"

# Change this to change the name of the auth site displayed
# in page titles and the site header.
SITE_NAME = "NC Buyback"

# This is your websites URL, set it accordingly
# Make sure this URL is WITHOUT a trailing slash
SITE_URL = env.str("SITE_URL")

# Django security
CSRF_TRUSTED_ORIGINS = [SITE_URL]

# Change this to enable/disable debug mode, which displays
# useful error messages but can leak sensitive data.
DEBUG = env.bool("DJANGO_DEBUG", default=False)

# Add any additional apps to this list.
INSTALLED_APPS += [
    "allianceauth.eveonline.autogroups",
    "buybackprogram",
    "ncbuyback",
    "debug_toolbar",
]

# To change the logging level for extensions, uncomment the following line.
# LOGGING['handlers']['extension_file']['level'] = 'DEBUG'

ANALYTICS_DISABLED = True

# Enter credentials to use MySQL/MariaDB. Comment out to use sqlite3
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": env.str("DB_NAME"),
        "USER": env.str("DB_USER"),
        "PASSWORD": env.str("DB_PASSWORD"),
        "HOST": env.str("DB_HOST"),
        "PORT": env.str("DB_PORT"),
        "OPTIONS": {"charset": "utf8mb4"},
    }
}

# Register an application at https://developers.eveonline.com for Authentication
# & API Access and fill out these settings. Be sure to set the callback URL
# to https://example.com/sso/callback substituting your domain for example.com in
# CCP's developer portal
# Logging in to auth requires the publicData scope (can be overridden through the
# LOGIN_TOKEN_SCOPES setting). Other apps may require more (see their docs).
ESI_SSO_CLIENT_ID = env.str("ESI_CLIENT_ID")
ESI_SSO_CLIENT_SECRET = env.str("ESI_SECRET_KEY")
ESI_SSO_CALLBACK_URL = f"{SITE_URL}/sso/callback"
ESI_USER_CONTACT_EMAIL = env.str("ESI_USER_CONTACT_EMAIL")

# By default, emails are validated before new users can log in.
# It's recommended to use a free service like SparkPost or Elastic Email to send email.
# https://www.sparkpost.com/docs/integrations/django/
# https://elasticemail.com/resources/settings/smtp-api/
# Set the default from email to something like 'noreply@example.com'
# Email validation can be turned off by uncommenting the line below. This can break some services.
# REGISTRATION_VERIFY_EMAIL = False
EMAIL_HOST = env.str("EMAIL_HOST")
EMAIL_PORT = env.int("EMAIL_PORT", default=587)
EMAIL_HOST_USER = env.str("EMAIL_HOST_USER", None)
EMAIL_HOST_PASSWORD = env.str("EMAIL_HOST_PASSWORD", None)
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=True)
DEFAULT_FROM_EMAIL = env.str("DEFAULT_FROM_EMAIL")

# Cache compression can help on bigger auths where ram starts to become an issue.
# Uncomment the following 3 lines to enable.

# CACHES["default"]["OPTIONS"] = {
#    "COMPRESSOR": "django_redis.compressors.lzma.LzmaCompressor",
# }

#######################################
# Add any custom settings below here. #
#######################################

# Buybackprogram price updates
CELERYBEAT_SCHEDULE["buybackprogram_update_all_prices"] = {
    "task": "buybackprogram.tasks.update_all_prices",
    "schedule": crontab(minute=0, hour="0"),
}

# Buybackprogram contract updates
CELERYBEAT_SCHEDULE["buybackprogram_update_all_contracts"] = {
    "task": "buybackprogram.tasks.update_all_contracts",
    "schedule": crontab(minute="*/15"),
}


BUYBACKPROGRAM_TRACKING_PREFILL = env.str("BUYBACKPROGRAM_TRACKING_PREFILL", "aa-bbp.")
BUYBACKPROGRAM_PRICE_SOURCE_ID = env.int("BUYBACKPROGRAM_PRICE_SOURCE_ID", 60003760)
BUYBACKPROGRAM_PRICE_SOURCE_NAME = env.str("BUYBACKPROGRAM_PRICE_SOURCE_NAME", "Jita")
BUYBACKPROGRAM_PRICE_AGE_WARNING_LIMIT = env.int("BUYBACKPROGRAM_PRICE_AGE_WARNING_LIMIT", 48)
BUYBACKPROGRAM_PRICE_METHOD = env.str("BUYBACKPROGRAM_PRICE_METHOD", "Fuzzwork")
BUYBACKPROGRAM_PRICE_JANICE_API_KEY = env.str("BUYBACKPROGRAM_PRICE_JANICE_API_KEY", None)
# BUYBACKPROGRAM_UNUSED_TRACKING_PURGE_LIMIT
BUYBACKPROGRAM_TRACK_PREFILL_CONTRACTS = env.bool("BUYBACKPROGRAM_TRACK_PREFILL_CONTRACTS", True)
